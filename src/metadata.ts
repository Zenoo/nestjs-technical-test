/* eslint-disable */
export default async () => {
    const t = {};
    return { "@nestjs/swagger": { "models": [[import("./users/users.dto"), { "UserCreateDto": { username: { required: true, type: () => String, description: "Username must be unique", example: "john_doe", minLength: 3, maxLength: 32 }, password: { required: true, type: () => String, description: "Password must be strong", example: "P@ssw0rd123", minLength: 8, maxLength: 128 }, roles: { required: true, type: () => [String], description: "User roles", example: ["ADMIN"] } }, "UserUpdateDto": { username: { required: true, type: () => String, description: "Username must be unique", example: "john_doe", minLength: 3, maxLength: 32 }, password: { required: false, type: () => String, description: "Password must be strong", example: "P@ssw0rd123", minLength: 8, maxLength: 128 }, roles: { required: false, type: () => [String], description: "User roles", example: ["ADMIN"] }, autoPublishRuns: { required: false, type: () => Boolean, description: "Auto publish runs", example: false } }, "UserDto": { id: { required: true, type: () => String, description: "UUID of the user", example: "123e4567-e89b-12d3-a456-426614174000" }, username: { required: true, type: () => String, description: "Username of the user", example: "john_doe" }, roles: { required: true, type: () => [String], description: "User roles", example: ["ADMIN"] }, autoPublishRuns: { required: true, type: () => Boolean, description: "Auto publish runs", example: false } } }], [import("./auth/dto/sign-in.dto"), { "UserAuthDto": { username: { required: true, type: () => String, description: "Username must be unique", example: "john_doe" }, password: { required: true, type: () => String, description: "Password must be strong", example: "P@ssw0rd123" } }, "JwtUserDto": { id: { required: true, type: () => String, description: "User ID", example: "123e4567-e89b-12d3-a456-426614174000" }, roles: { required: true, type: () => [String], description: "User roles", example: ["ADMIN"] }, username: { required: true, type: () => String, description: "User username", example: "john_doe" } } }], [import("./runs/runs.dto"), { "RunCreateDto": { type: { required: true, type: () => Object, description: "Type of run", example: "TRAINING" }, start: { required: true, type: () => Date, description: "Start time of the run", example: "2023-10-01T10:00:00Z" }, duration: { required: true, type: () => Number, description: "Duration of the run in milliseconds", example: 3600000, minimum: 1 }, distance: { required: true, type: () => Number, description: "Distance of the run in kilometers", example: 6.5, minimum: 1 }, comment: { required: false, type: () => String, description: "Comment about the run", example: "Morning run" } }, "RunUpdateDto": { type: { required: false, type: () => Object }, start: { required: false, type: () => Date, description: "Start time of the run", example: "2023-10-01T10:00:00Z" }, duration: { required: false, type: () => Number, description: "Duration of the run in milliseconds", example: 3600000, minimum: 1 }, distance: { required: false, type: () => Number, description: "Distance of the run in kilometers", example: 6.5, minimum: 1 }, comment: { required: false, type: () => String, description: "Comment about the run", example: "Morning run" } }, "RunDto": { uuid: { required: true, type: () => String, description: "UUID of the run", example: "123e4567-e89b-12d3-a456-426614174000" }, averageSpeed: { required: true, type: () => Number, description: "Average speed of the run in km/h", example: 10.5 }, averagePace: { required: true, type: () => Number, description: "Average pace of the run in minutes per kilometer", example: 5.7 }, public: { required: true, type: () => Boolean, description: "Run public status", example: true } } }], [import("./records/records.dto"), { "RecordDto": { time: { required: true, type: () => Number }, distance: { required: true, type: () => Number }, averagePace: { required: true, type: () => Number }, runId: { required: true, type: () => String } } }], [import("./common/dto/error.dto"), { "ErrorDto": { message: { required: true, type: () => String, description: "Error message", example: "The error message" }, statusCode: { required: true, type: () => Number, description: "HTTP status code", example: 401 } } }]], "controllers": [[import("./app.controller"), { "AppController": { "getHello": { summary: "A simple hello world endpoint", type: String } } }], [import("./auth/auth.controller"), { "AuthController": { "signIn": { summary: "Sign in a user" }, "signUp": { summary: "Sign up a user" }, "getProfile": { summary: "Get the profile of the authenticated user", type: Object } } }], [import("./users/users.controller"), { "UsersController": { "create": { summary: "Create a new user (admin only)" }, "findAll": { summary: "Get all users (admin only)" }, "findOne": { summary: "Get a specific user from its UUID" }, "update": { summary: "Update a user" }, "remove": { summary: "Delete a user (admin only)" } } }], [import("./runs/runs.controller"), { "RunsController": { "create": { summary: "Create a new run" }, "findAll": { summary: "Get all runs (admin only)" }, "findOwn": { summary: "Get the authenticated user's runs" }, "findOne": { summary: "Get a specific run from its UUID" }, "update": { summary: "Update a specific run" }, "remove": { summary: "Delete a specific run" } } }], [import("./records/records.controller"), { "RecordsController": { "getOwn": { summary: "Get the fastest runs for the authenticated user", type: Object }, "getAll": { summary: "Get the fastest runs for all users", type: Object } } }]] } };
};